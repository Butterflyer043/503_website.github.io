---
title: "EDA"
output: html_document
---
# Python 

1. Explore all accounts. Create visualizations that combine or these account characteristics:   
a. Whether an account has a credit card or not    
b. Whether an account has a loan or not    
c. The average balance for the account   

```{r include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning=FALSE)
```

```{r include=FALSE}
library(reticulate)
use_python("/opt/anaconda3/bin/python",required=TRUE)

```

```{python}
# import library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pylab import *
import matplotlib.colors as colors
```

```{python}

# import data
df = pd.read_csv("accounts_analytical.csv")
df2 = pd.read_csv("transactions.csv")

```

##  Pie Chart in python

```{python}
# plot the Number of Credit Cards
plt.figure(figsize=((10,8)))
#set up color
cmap = plt.cm.get_cmap('Set3', 10)(np.arange(10))
fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(10,5))

#set up data for credit_cards
df['if_cr']= np.where(df['credit_cards'].isnull() , 'No','Yes')
sum_cr = pd.DataFrame(df.credit_cards.value_counts(dropna=False)).reset_index()
labels = ["No credit cards","1","2"]
sizes = sum_cr.credit_cards
explode = (0.1, 0, 0)
# plot 1
_ = ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90, colors=cmap)
_ = ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
_ = ax1.set_title('If the account has credit cards')



#set up data for loan
df['if_loan']= np.where(df['loan_date'].isnull() , 'No','Yes')
#df.loc[:,['if_loan','loan_date']]
sum_loan = pd.DataFrame(df.if_loan.value_counts(dropna=False)).reset_index()

labels2 = ["No","Yes"]
sizes2 = sum_loan.if_loan
explode2 = (0.1, 0)

_ = ax2.pie(sizes2, explode=explode2, labels=labels2, autopct='%1.1f%%',
        shadow=True, startangle=90, colors=cmap)
_ = ax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
_ = ax2.set_title('If the account has a loan.')


plt.show()
```

```{python}
# compute average balance
avg_bal=pd.DataFrame(df2.groupby(['account_id']).mean()["balance"]).reset_index()
df3 = pd.merge(df.loc[:,['account_id','if_loan','if_cr']], avg_bal, on='account_id')
```

##  Bar Chart in python

```{python}
# plot the hist of average balance
_ = plt.hist(avg_bal.balance, bins=25, edgecolor='white', linewidth=1,color="skyblue")  
_ = plt.xlabel('Average balance per account')
_ = plt.ylabel('Number of accounts')
plt.show()
```


```{python}
fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(10,5))
result1 = pd.DataFrame(df3.groupby(['if_loan']).mean())
result2 = pd.DataFrame(df3.groupby(['if_cr']).mean())
_ = fig.suptitle('Average Balance')
_ = ax1.bar(result1.index, result1['balance'],color=['skyblue',"steelblue"])
_ = ax1.set_title('If the account has a loan')
_ = ax2.bar(result2.index, result2['balance'],color=['skyblue',"steelblue"])
_ = ax2.set_title('If the  account has a credit cards')
plt.show()
```
Most accounts (about 85%) do not have credit cards and loans. For the average balance of the accounts, most users have an average balance around \$20000-\$30000. For the accounts with loan, they are more likely to have a higher average balance then the accounts that don't have loan. Accounts with credit cards and accounts without credit cards have a small difference in average balance, it seems that whether there is a credit card has little correlation with average balance.

# R

What is the distribution of all loans and what are their characteristics?

```{r}
df = read.csv("accounts_analytical.csv")

df_loan = df[! is.na(df$loan_amount),]

```
```{r message=FALSE, warning=FALSE}

library(dplyr)
library(ggplot2)
library(ggpubr)
```




## Figure 1

```{r message=FALSE, warning=FALSE}
# plot the histogram of loan
options(scipen=999)
p1 = ggplot(df_loan, aes(x=loan_amount)) + 
  geom_histogram(color="black", fill="lightblue",bins = 12)+
  labs(title="Histogram of loan amount")+
  xlim(4980,590820)



p2 = ggplot(df_loan, aes(x=loan_payment)) + 
  geom_histogram(color="black", fill="lightblue",bins = 10)+
  labs(title="Histogram of loan payment")


ggarrange(p1,p2, ncol = 2, nrow = 1)
```


```{r}
df_loan2 = df_loan[, c("account_id","loan_amount", "loan_payment", "loan_status", "loan_default", "loan_term")]
df_loan3  = df_loan2  %>%
  mutate(loans_status = case_when(loan_status == "expired"&loan_default == FALSE ~ 'The expired loan that was paid in full',
                              loan_status == "expired"&loan_default == TRUE ~ 'The expired loan that was not paid in full',
                              loan_status == "current"&loan_default == FALSE ~ 'The current loan where all payments are being made',
                              loan_status == "current"&loan_default == TRUE ~ 'The current loan that not all payments being made'))%>%
  mutate(loan_amount_gr = cut(df_loan2$loan_amount, breaks = c(4000,  80000, 160000, 230000, 300000,  590822), labels = c("[4-80)","[80-160)","[160-230)","[230-300)","[300-600)")))
df_loan4 = df_loan3[,c("loan_amount_gr","loans_status")]

# Customer and loan verification
p3 = ggplot(data=df_loan4 , aes(x=loan_amount_gr, fill=loans_status))+ geom_bar()+
    labs(title="Loan Status vs total loan amount")+xlab("Loan Amount (in thousands) ")+ theme(legend.position="right")
```



```{r }

df_loan2 = df_loan[, c("account_id","loan_amount", "loan_payment", "loan_status", "loan_default", "loan_term")]
df_loan3  = df_loan2  %>%
  mutate(loans_status = case_when(loan_status == "expired"&loan_default == FALSE ~ 'The expired loan that was paid in full',
                              loan_status == "expired"&loan_default == TRUE ~ 'The expired loan that was not paid in full',
                              loan_status == "current"&loan_default == FALSE ~ 'The current loan where all payments are being made',
                              loan_status == "current"&loan_default == TRUE ~ 'The current loan that not all payments being made'))%>%
  mutate(loan_amount_gr = cut(df_loan2$loan_payment, breaks = c(0,2000,4000,6000,8000,10000), labels = c("[0,2)","[2-4)","[4-6)","[6-8)","[8-10)")))
df_loan4 = df_loan3[,c("loan_amount_gr","loans_status")]

# Customer and loan verification
p4 = ggplot(data=df_loan4 , aes(x=loan_amount_gr, fill=loans_status))+ geom_bar()+
    labs(title="Loan Status vs total loan payment")+xlab("Loan payment (in thousands) ")+ theme(legend.position="right")


```

## Figure 2

```{r fig.height=6, fig.width=10}
ggarrange(p3,p4, ncol = 2, nrow = 1, common.legend = TRUE, legend = "right")

```
The distribution of loan amount (left plot of Figure1) shows right-shewed shape. For the most accounts that have loan, the  total amount that does not exceed 150,000.  And according to the right plot of Figure1, people are more likely to choose to pay about 2000 to 3000 per term. Based on the information that indicated on figure2. 
Based on the information that indicated on figure2ï¼Œwe can conclude that the people who have large loan amount(300-600 thousand)  are more likely to fail to pay in full. As for the payment, the lower payment, the higher percentage of making a full payment.



##### Is there a relationship between a good or bad loan and the time between an account is opened an the loan is created?

```{r include=FALSE}
df = read.csv("accounts_analytical.csv")

df_loan = df[! is.na(df$loan_amount),]

```
```{r message=FALSE, warning=FALSE,include=FALSE}

library(dplyr)
library(ggplot2)
library(ggpubr)
```


```{r message=FALSE, warning=FALSE,include=FALSE}
# plot the histogram of loan
options(scipen=999)
p1 = ggplot(df_loan, aes(x=loan_amount)) + 
  geom_histogram(color="black", fill="lightblue",bins = 12)+
  labs(title="Histogram of loan amount")+
  xlim(4980,590820)



p2 = ggplot(df_loan, aes(x=loan_payment)) + 
  geom_histogram(color="black", fill="lightblue",bins = 10)+
  labs(title="Histogram of loan payment")


ggarrange(p1,p2, ncol = 2, nrow = 1)
```


```{r include=FALSE}
df_loan2 = df_loan[, c("account_id","loan_amount", "loan_payment", "loan_status", "loan_default", "loan_term")]
df_loan3  = df_loan2  %>%
  mutate(loans_status = case_when(loan_status == "expired"&loan_default == FALSE ~ 'The expired loan that was paid in full',
                              loan_status == "expired"&loan_default == TRUE ~ 'The expired loan that was not paid in full',
                              loan_status == "current"&loan_default == FALSE ~ 'The current loan where all payments are being made',
                              loan_status == "current"&loan_default == TRUE ~ 'The current loan that not all payments being made'))%>%
  mutate(loan_amount_gr = cut(df_loan2$loan_amount, breaks = c(4000,  80000, 160000, 230000, 300000,  590822), labels = c("[4-80)","[80-160)","[160-230)","[230-300)","[300-600)")))
df_loan4 = df_loan3[,c("loan_amount_gr","loans_status")]

# Customer and loan verification
p3 = ggplot(data=df_loan4 , aes(x=loan_amount_gr, fill=loans_status))+ geom_bar()+
    labs(title="Loan Status vs total loan amount")+xlab("Loan Amount (in thousands) ")+ theme(legend.position="right")
```


```{r include=FALSE}

df_loan2 = df_loan[, c("account_id","loan_amount", "loan_payment", "loan_status", "loan_default", "loan_term")]
df_loan3  = df_loan2  %>%
  mutate(loans_status = case_when(loan_status == "expired"&loan_default == FALSE ~ 'The expired loan that was paid in full',
                              loan_status == "expired"&loan_default == TRUE ~ 'The expired loan that was not paid in full',
                              loan_status == "current"&loan_default == FALSE ~ 'The current loan where all payments are being made',
                              loan_status == "current"&loan_default == TRUE ~ 'The current loan that not all payments being made'))%>%
  mutate(loan_amount_gr = cut(df_loan2$loan_payment, breaks = c(0,2000,4000,6000,8000,10000), labels = c("[0,2)","[2-4)","[4-6)","[6-8)","[8-10)")))
df_loan4 = df_loan3[,c("loan_amount_gr","loans_status")]

# Customer and loan verification
p4 = ggplot(data=df_loan4 , aes(x=loan_amount_gr, fill=loans_status))+ geom_bar()+
    labs(title="Loan Status vs total loan payment")+xlab("Loan payment (in thousands) ")+ theme(legend.position="right")


```

## Figure 3

##### The relationship between a good or bad loan and the time between an account is opened an the loan is created.
```{r}
# import lib and data
library(dplyr)
library(ggplot2)
library(ggpubr)
library(reshape2)

df = read.csv("accounts_analytical.csv")

df_loan = df[! is.na(df$loan_amount),]
#df_loan
```

```{r}
df_loan["days"] = as.numeric(as.Date(as.character(df_loan$loan_date), format="%Y-%m-%d") - as.Date(as.character(df_loan$acct_creation_date), format="%Y-%m-%d"))
df_loan2 = df_loan[,c("loan_default","days","loan_amount")]
```


```{r message=FALSE, warning=FALSE}
#df_loan2 
df_loan2 %>%
  ggplot( aes(x=days, fill=loan_default)) +
    geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
    scale_fill_manual(values=c("#69b3a2", "#404080")) +
    ylab("")
```

```{r}
cor.test(as.numeric(df_loan2$days),as.numeric(df_loan2$loan_default),method = "pearson")
```




##### Is there a specific set of accounts that seem to be at higher or lower risk of defaulting?


## Figure 5

```{r}
# plot heatmap
df_loan = df[! is.na(df$loan_amount),]
df_loan3 = df_loan[,c(12,13:16,19,22,25,28,31,34,37,40,43,49,52,55,60)]
cormat <- round(cor(df_loan3, method ="pearson"),2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
 geom_tile(color = "white")+
 scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
   midpoint = 0, limit = c(-1,1), space = "Lab", 
   name="Pearson\nCorrelation")+
    theme_minimal()+ 
 theme(axis.text.x = element_text(angle = 45, vjust = 1, 
    size = 3, hjust = 1))



```

## Figure 6

```{r message=FALSE, warning=FALSE}
 df_loan3 %>%
  ggplot( aes(x=max_balance, fill=loan_default)) +
    geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
    scale_fill_manual(values=c("#69b3a2","#404080")) +theme(legend.position="top")


```


##### For the account with the highest number of transactions, make a time series line plot for the behavior of the account over time, including all debits and credits, the different methods, and the with the different categories.


```{r message=FALSE, warning=FALSE}
# import lib and data
library(dplyr)
library(ggplot2)
library(ggpubr)
library(reshape2)

df = read.csv("accounts_analytical.csv")
df2 = read.csv("transactions.csv")
```
```{r eval=FALSE, include=FALSE}
df2
```


```{r}
# find the highest number of transactions 
df_highest = df2 %>% count(account_id)%>% filter(n==max(n))
df_highest = df_highest$account_id
```

The account id of the highest number of transactions is `r df_highest`


```{r}
df3 = df2[df2$account_id == df_highest,]
df3$date = as.Date(df3$date)
df3$category=as.character(df3$category)
df3$method=as.character(df3$method)
df3$method[df3$method == ""]  = 'credit card'
df3$category[df3$category == ""]  = 'non category'
df3 = transform(df3, newvar=paste(method, category))


vis1 = ggplot(df3[df3$newvar == unique(df3$newvar)[1],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))  +rremove('xlab')+rremove("ylab")+
  labs(title="cash for non category")

vis2 = ggplot(df3[df3$newvar == unique(df3$newvar)[2],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="bank transfer for non category ")

vis3 = ggplot(df3[df3$newvar == unique(df3$newvar)[3],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="bank transfer for loan payment")

vis4 = ggplot(df3[df3$newvar == unique(df3$newvar)[4],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title=" bank transfer for household payment")


vis5 = ggplot(df3[df3$newvar == unique(df3$newvar)[5],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="bank transfer for insurance payment")


vis6 = ggplot(df3[df3$newvar == unique(df3$newvar)[6],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="cash for statement charge ")



vis7 = ggplot(df3[df3$newvar == unique(df3$newvar)[7],], aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="credit card for interest credit ")


vis8 = ggplot(df3, aes(x = date, y = amount)) + 
  geom_line(aes(color = type), size = 1,alpha=0.6) +
  scale_x_date(date_labels = "%m-%Y")+
  scale_color_manual(values=c("#69b3a2", "#404080"))+
  rremove('xlab')+rremove("ylab")+
  labs(title="Overall,Cr vs De")

```

## Figure 7
```{r fig.height=12, fig.width=6}
ggarrange(vis8,vis1,vis2,vis3,vis4,vis5,vis6, vis7, ncol = 2, nrow = 4,common.legend = TRUE, legend = "bottom")

```


##### Explore the validity of the data for the case whether or not an account has a credit card and whether or not they have associated credit card transactions. Is there anything worth noting?


```{r message=FALSE, warning=FALSE}
# import lib and data
library(dplyr)
library(ggplot2)
library(ggpubr)
library(reshape2)

df = read.csv("accounts_analytical.csv")
df2 = read.csv("transactions.csv")
```

## Figure 8
```{r}
# verify whether there the account has credit_cards 
df3 = df %>% mutate(if_crcard = ifelse(is.na(credit_cards), 'no cr', 'has cr')) 
# compute the number of credit card transaction
df4 = df2 %>% count(account_id,method)%>% filter(method=="credit card")

df_new = df3[,c("account_id","if_crcard")]  %>% 
  left_join(df4[,c("account_id","n")], by = "account_id") %>% 
  mutate(if_crcardtxn = ifelse(is.na(n),  'has txn','no txn')) 
table1 = table(df_new$if_crcard,df_new$if_crcardtxn)
plot(table1,color = c("#69b3a2", "#404080" ),main="")

```

 
